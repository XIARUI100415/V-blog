'use strict';

const process = require('node:process');
const ansis = require('ansis');
const cac = require('cac');
const build = require('../shared/vite-ssg.Yslkh-C-.cjs');
require('node:fs');
require('node:fs/promises');
require('node:module');
require('node:path');
require('@unhead/dom');
require('jsdom');
require('vite');
require('../shared/vite-ssg.CjsEygxB.cjs');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const process__default = /*#__PURE__*/_interopDefaultCompat(process);

const cli = cac.cac("vite-ssg");
cli.command("build", "Build SSG").option("--script <script>", "Rewrites script loading timing").option("--mock", "Mock browser globals (window, document, etc.) for SSG").option("--mode <mode>", "Specify the mode the Vite process is running in").option("--config, -c <config>", "The vite config file to use").option("--base, -b <base>", "The base path to render").action(async (args) => {
  const { config: configFile = void 0, ...ssgOptions } = args;
  if (args.script && !["sync", "async", "defer", "async defer"].includes(args.script)) {
    console.error(`
${ansis.gray("[vite-ssg]")} ${ansis.bold(ansis.red("Invalid script option."))}`);
    process__default.exit(1);
  }
  await build.build(ssgOptions, { configFile });
});
cli.on("command:*", () => {
  console.error(`
${ansis.gray("[vite-ssg]")} ${ansis.bold(ansis.red("Invalid command."))}`);
  cli.outputHelp();
  process__default.exit(1);
});
cli.help();
cli.parse(process__default.argv);
