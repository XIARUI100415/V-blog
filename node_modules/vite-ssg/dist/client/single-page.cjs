'use strict';

const client = require('@unhead/vue/client');
const server = require('@unhead/vue/server');
const vue = require('vue');
const ClientOnly = require('../shared/vite-ssg.CtcYxXEX.cjs');
const state = require('../shared/vite-ssg.CjsEygxB.cjs');

function ViteSSG(App, fn, options) {
  const {
    transformState,
    registerComponents = true,
    useHead = true,
    rootContainer = "#app"
  } = options ?? {};
  async function createApp(_client = false) {
    const app = undefined.SSR || options?.hydration ? vue.createSSRApp(App) : vue.createApp(App);
    let head;
    if (useHead) {
      app.use(head = undefined.SSR ? server.createHead() : client.createHead());
    }
    const appRenderCallbacks = [];
    const onSSRAppRendered = undefined.SSR ? (cb) => appRenderCallbacks.push(cb) : () => {
    };
    const triggerOnSSRAppRendered = () => {
      return Promise.all(appRenderCallbacks.map((cb) => cb()));
    };
    const context = {
      app,
      head,
      isClient: !undefined.SSR,
      router: void 0,
      routes: void 0,
      initialState: {},
      onSSRAppRendered,
      triggerOnSSRAppRendered,
      transformState
    };
    if (registerComponents)
      app.component("ClientOnly", ClientOnly.ClientOnly);
    if (!undefined.SSR) {
      await ClientOnly.documentReady();
      context.initialState = transformState?.(window.__INITIAL_STATE__ || {}) || state.deserializeState(window.__INITIAL_STATE__);
    }
    await fn?.(context);
    const initialState = context.initialState;
    return {
      ...context,
      initialState
    };
  }
  if (!undefined.SSR) {
    (async () => {
      const { app } = await createApp();
      app.mount(rootContainer, true);
    })();
  }
  return createApp;
}

exports.ViteSSG = ViteSSG;
