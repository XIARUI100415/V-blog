'use strict';

const client = require('@unhead/vue/client');
const server = require('@unhead/vue/server');
const vue = require('vue');
const vueRouter = require('vue-router');
const ClientOnly = require('./shared/vite-ssg.CtcYxXEX.cjs');
const state = require('./shared/vite-ssg.CjsEygxB.cjs');

function ViteSSG(App, routerOptions, fn, options) {
  const {
    transformState,
    registerComponents = true,
    useHead = true,
    rootContainer = "#app"
  } = options ?? {};
  async function createApp(_client = false, routePath) {
    const app = undefined.SSR || options?.hydration ? vue.createSSRApp(App) : vue.createApp(App);
    let head;
    if (useHead) {
      app.use(head = undefined.SSR ? server.createHead() : client.createHead());
    }
    const router = vueRouter.createRouter({
      history: undefined.SSR ? vueRouter.createMemoryHistory(routerOptions.base) : vueRouter.createWebHistory(routerOptions.base),
      ...routerOptions
    });
    const { routes } = routerOptions;
    if (registerComponents)
      app.component("ClientOnly", ClientOnly.ClientOnly);
    const appRenderCallbacks = [];
    const onSSRAppRendered = undefined.SSR ? (cb) => appRenderCallbacks.push(cb) : () => {
    };
    const triggerOnSSRAppRendered = () => {
      return Promise.all(appRenderCallbacks.map((cb) => cb()));
    };
    const context = {
      app,
      head,
      isClient: !undefined.SSR,
      router,
      routes,
      onSSRAppRendered,
      triggerOnSSRAppRendered,
      initialState: {},
      transformState,
      routePath
    };
    if (!undefined.SSR) {
      await ClientOnly.documentReady();
      context.initialState = transformState?.(window.__INITIAL_STATE__ || {}) || state.deserializeState(window.__INITIAL_STATE__);
    }
    await fn?.(context);
    app.use(router);
    let entryRoutePath;
    let isFirstRoute = true;
    router.beforeEach((to, from, next) => {
      if (isFirstRoute || entryRoutePath && entryRoutePath === to.path) {
        isFirstRoute = false;
        entryRoutePath = to.path;
        to.meta.state = context.initialState;
      }
      next();
    });
    if (undefined.SSR) {
      const route = context.routePath ?? "/";
      router.push(route);
      await router.isReady();
      context.initialState = router.currentRoute.value.meta.state || {};
    }
    const initialState = context.initialState;
    return {
      ...context,
      initialState
    };
  }
  if (!undefined.SSR) {
    (async () => {
      const { app, router } = await createApp();
      await router.isReady();
      app.mount(rootContainer, true);
    })();
  }
  return createApp;
}

exports.ViteSSG = ViteSSG;
