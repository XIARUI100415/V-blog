import { q as defineComponent, s as ref, k as createBlock, p as withCtx, y as unref, x as createVNode, a as createBaseVNode, z as createTextVNode, c as createElementBlock, j as renderList, w as withDirectives, ac as vModelCheckbox, t as toDisplayString, aa as postList, F as Fragment, ad as vModelText, o as openBlock } from './index-BJpUDkpC.js';
import { P as Pe, b as script, g as ge, d as axios } from './splitpanes.es-DzeLiV6K.js';

const _hoisted_1 = {
  flex: "~ gap-2",
  class: "items-center justify-center"
};
const _hoisted_2 = {
  class: "h-full",
  overflow: "auto",
  pl: "12",
  pr: "4",
  py: "4"
};
const _hoisted_3 = ["name", "value"];
const _hoisted_4 = ["for"];
const _hoisted_5 = {
  class: "h-full",
  overflow: "auto",
  pl: "12",
  pr: "4",
  py: "4"
};
const _hoisted_6 = ["for"];
const _hoisted_7 = ["onUpdate:modelValue", "name"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "migration",
  setup(__props) {
    const mapper = ref({});
    const checkedPosts = ref([]);
    function clearPosts(select) {
      checkedPosts.value.length = 0;
      if (select)
        checkedPosts.value = checkedPosts.value.concat(postList.value.posts.map((i) => i.filePath));
    }
    async function migration() {
      const update = {};
      for (const key in mapper.value) {
        if (mapper.value[key] !== "")
          update[key] = mapper.value[key];
      }
      const res = await axios.post("/valaxy-devtools-api/migration", {
        pageData: checkedPosts.value,
        frontmatter: update
      });
      if (res.data === "ok") ;
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Pe), { class: "h-full" }, {
        default: withCtx(() => [
          createVNode(unref(ge), null, {
            default: withCtx(() => [
              createBaseVNode("div", _hoisted_1, [
                createVNode(unref(script), {
                  onClick: _cache[0] || (_cache[0] = ($event) => clearPosts(true))
                }, {
                  default: withCtx(() => _cache[3] || (_cache[3] = [
                    createTextVNode(" 全选 ")
                  ])),
                  _: 1
                }),
                createVNode(unref(script), {
                  onClick: _cache[1] || (_cache[1] = ($event) => clearPosts(false))
                }, {
                  default: withCtx(() => _cache[4] || (_cache[4] = [
                    createTextVNode(" 清空 ")
                  ])),
                  _: 1
                })
              ]),
              createBaseVNode("ul", _hoisted_2, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(postList).posts, (post) => {
                  return openBlock(), createElementBlock("li", {
                    key: post.filePath,
                    class: "list-decimal"
                  }, [
                    withDirectives(createBaseVNode("input", {
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => checkedPosts.value = $event),
                      type: "checkbox",
                      name: post.filePath,
                      value: post.filePath
                    }, null, 8, _hoisted_3), [
                      [vModelCheckbox, checkedPosts.value]
                    ]),
                    createBaseVNode("label", {
                      for: post.filePath
                    }, toDisplayString(post.frontmatter.title), 9, _hoisted_4)
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          }),
          createVNode(unref(ge), null, {
            default: withCtx(() => [
              _cache[5] || (_cache[5] = createBaseVNode("h2", null, "原frontmatter字段->新字段", -1)),
              createBaseVNode("button", { onClick: migration }, " 提交 "),
              createBaseVNode("ul", _hoisted_5, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(mapper.value, (_, key) => {
                  return openBlock(), createElementBlock("li", { key }, [
                    createBaseVNode("label", {
                      for: key,
                      style: { "margin-right": "20px" }
                    }, toDisplayString(key) + " ->", 9, _hoisted_6),
                    withDirectives(createBaseVNode("input", {
                      "onUpdate:modelValue": ($event) => mapper.value[key] = $event,
                      name: key
                    }, null, 8, _hoisted_7), [
                      [vModelText, mapper.value[key]]
                    ])
                  ]);
                }), 128))
              ])
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

export { _sfc_main as default };
