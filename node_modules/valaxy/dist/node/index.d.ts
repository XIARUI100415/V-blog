import { ViteSSGOptions } from 'vite-ssg';
import * as vite from 'vite';
import { UserConfig, InlineConfig, PluginOption, Plugin } from 'vite';
import { MarkdownEnv } from 'unplugin-vue-markdown/types';
import { S as SiteConfig, D as DefaultTheme, V as ValaxyConfig, a as ValaxyAddon, P as PartialDeep, R as RuntimeConfig, b as RedirectItem, U as UserSiteConfig } from '../config-D40juN_m.js';
import Vue from '@vitejs/plugin-vue';
import { Options as Options$3 } from 'beasties';
import { Hookable } from 'hookable';
import { PluginVisualizerOptions } from 'rollup-plugin-visualizer';
import { presetUno, presetAttributify, presetIcons, presetTypography } from 'unocss';
import { VitePluginConfig } from 'unocss/vite';
import Components from 'unplugin-vue-components/vite';
import Markdown from 'unplugin-vue-markdown/vite';
import { EditableTreeNode } from 'unplugin-vue-router';
import Router from 'unplugin-vue-router/vite';
import Layouts from 'vite-plugin-vue-layouts';
import { Options as Options$2 } from 'vitepress-plugin-group-icons';
import { HeadersPluginOptions } from '@mdit-vue/plugin-headers';
import { SfcPluginOptions } from '@mdit-vue/plugin-sfc';
import { TocPluginOptions } from '@mdit-vue/plugin-toc';
import { KatexOptions } from 'katex';
import MarkdownIt from 'markdown-it';
import anchorPlugin from 'markdown-it-anchor';
import { Options as Options$1, MarkdownItAsync } from 'markdown-it-async';
import { ThemeRegistration, BuiltinTheme, LanguageInput, ShikiTransformer, Highlighter } from 'shiki';
export { cli, registerDevCommand, run, startValaxyDev } from './cli/index.js';
import { Awaitable } from '@antfu/utils';
import * as defu from 'defu';
import '@vueuse/integrations/useFuse';
import 'medium-zoom';
import 'vanilla-lazyload';
import 'vue-router';
import '@vueuse/core';
import '@unhead/schema-org';
import 'yargs';

declare module 'vite' {
    interface UserConfig {
        ssgOptions?: ViteSSGOptions;
    }
}

/**
 * Valaxy Node Instance
 * @param options
 */
declare function createValaxyNode(options: ResolvedValaxyOptions): ValaxyNode;

interface Options {
    hasSingleTheme: boolean;
    theme: ThemeOptions;
    siteConfig?: SiteConfig;
}

interface BlockItem {
    text?: string;
    icon?: string;
    color?: string;
    /**
     * for i18n
     */
    langs?: {
        [key: string]: string;
    };
}
interface Blocks {
    tip?: BlockItem;
    warning?: BlockItem;
    danger?: BlockItem;
    info?: BlockItem;
    details?: BlockItem;
}
type ContainerOptions = Blocks & Partial<Options>;

type ThemeOptions = ThemeRegistration | BuiltinTheme | {
    light: ThemeRegistration | BuiltinTheme;
    dark: ThemeRegistration | BuiltinTheme;
};
/**
 * Extend Markdown options
 * @zh 扩展 Markdown 配置，包含代码高亮、Markdown-it 和插件配置
 */
interface MarkdownOptions extends Options$1 {
    /**
     * Setup markdown-it instance before applying plugins
     */
    preConfig?: (md: MarkdownItAsync) => void;
    /**
     * markdown-it options
     */
    options?: MarkdownIt['options'];
    /**
     * config markdown-it
     */
    config?: (md: MarkdownItAsync) => void;
    anchor?: anchorPlugin.AnchorOptions;
    attrs?: {
        leftDelimiter?: string;
        rightDelimiter?: string;
        allowedAttributes?: string[];
        disable?: boolean;
    };
    /**
     * Custom theme for syntax highlighting.
     *
     * You can also pass an object with `light` and `dark` themes to support dual themes.
     *
     * @see You can use an existing theme. https://shiki.style/themes
     * @see Or add your own theme. https://shiki.style/guide/load-theme
     *
     * @example { theme: 'github-dark' }
     * @example light and dark themes
     * ```js
     * { theme: { light: 'github-light', dark: 'github-dark' } }
     * ```
     */
    theme?: ThemeOptions;
    /**
     * Languages for syntax highlighting.
     * @see https://shiki.style/languages
     */
    languages?: LanguageInput[];
    /**
     * Custom language aliases.
     *
     * @example { 'my-lang': 'js' }
     * @see https://shiki.style/guide/load-lang#custom-language-aliases
     */
    languageAlias?: Record<string, string>;
    /**
     * Show line numbers in code blocks
     * @default false
     */
    lineNumbers?: boolean;
    /**
     * Fallback language when the specified language is not available.
     */
    defaultHighlightLang?: string;
    /**
     * Transformers applied to code blocks
     * @see https://shiki.style/guide/transformers
     */
    codeTransformers?: ShikiTransformer[];
    /**
     * Setup Shiki instance
     */
    shikiSetup?: (shiki: Highlighter) => void | Promise<void>;
    /**
     * Options for `@mdit-vue/plugin-headers`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-headers
     */
    headers?: HeadersPluginOptions | boolean;
    /**
     * Options for `@mdit-vue/plugin-sfc`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-sfc
     */
    sfc?: SfcPluginOptions;
    /**
     * Options for `@mdit-vue/plugin-toc`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-toc
     */
    toc?: TocPluginOptions;
    /**
     * Options for `markdown-it-container`
     * @see https://github.com/markdown-it/markdown-it-container
     */
    container?: ContainerOptions;
    /**
     * Custom block configurations based on `markdown-it-container`
     */
    blocks?: Blocks;
    /**
     * @see [markdown-it-image-figures](https://www.npmjs.com/package/markdown-it-image-figures)
     */
    imageFigures?: {
        lazy: boolean;
        removeSrc: boolean;
        async: boolean;
        classes: string;
    };
    /**
     * @see https://katex.org/docs/options.html
     */
    katex?: KatexOptions;
    externalLinks?: Record<string, string>;
}

type ValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = ValaxyConfig<ThemeConfig> & ValaxyExtendConfig;
type UserValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = PartialDeep<ValaxyNodeConfig<ThemeConfig>>;
/**
 * fn with options for theme config
 */
type ValaxyConfigFn<ThemeConfig = DefaultTheme.Config> = (options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyConfigExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyConfigFn<ThemeConfig>;
type HookResult = Promise<void> | void;
interface ValaxyHooks {
    'options:resolved': () => HookResult;
    'config:init': () => HookResult;
    /**
     * @see valaxy/node/plugins/vueRouter.ts extendRoute
     */
    'vue-router:extendRoute': (route: EditableTreeNode) => HookResult;
    'vue-router:beforeWriteFiles': (root: EditableTreeNode) => HookResult;
    'build:before': () => HookResult;
    'build:after': () => HookResult;
}
interface ValaxyNode {
    version: string;
    hooks: Hookable<ValaxyHooks>;
    hook: ValaxyNode['hooks']['hook'];
    options: ResolvedValaxyOptions;
}
interface ValaxyExtendConfig {
    /**
     * Don't fail builds due to dead links.
     *
     * @default false
     * @deprecated use `build.ignoreDeadLinks` instead
     */
    ignoreDeadLinks?: boolean | 'localhostLinks' | (string | RegExp | ((link: string) => boolean))[];
    /**
     * options for `valaxy build`
     */
    build: {
        /**
         * Don't fail builds due to dead links.
         * @zh 忽略死链
         * @default false
         */
        ignoreDeadLinks?: boolean | 'localhostLinks' | (string | RegExp | ((link: string) => boolean))[];
        /**
         * Enable SSG for pagination
         * @en When enabled, it will generate pagination pages for you. `/page/1`, `/page/2`, ...
         * @zh 启用 SSG 分页，将单独构建分页页面 `/page/1`, `/page/2`, ...
         * @default false
         */
        ssgForPagination: boolean;
    };
    /**
     * @experimental
     * Deploy to gh-pages/remote server
     */
    deploy: {
        /**
         * @zh 部署类型
         * @en deploy type
         */
        type?: 'gh-pages' | 'remote';
    };
    /**
     * internal modules
     */
    modules: {
        rss: {
            /**
             * enable rss
             */
            enable: boolean;
            /**
             * @zh 全文输出
             * @en full text output
             * @default false
             */
            fullText: boolean;
        };
    };
    /**
     * Markdown Feature
     */
    features: {
        /**
         * enable katex for global
         * @see [Example | Valaxy](https://valaxy.site/examples/katex)
         * @see https://katex.org/
         */
        katex: boolean;
    };
    /**
     * vite.config.ts options
     * @see https://vite.dev/
     */
    vite?: UserConfig;
    /**
     * @vitejs/plugin-vue options
     * @see https://github.com/vitejs/vite-plugin-vue/blob/main/packages/plugin-vue/README.md
     */
    vue?: Parameters<typeof Vue>[0] & {
        isCustomElement?: ((tag: string) => boolean)[];
    };
    /**
     * @see https://github.com/unplugin/unplugin-vue-components
     *
     * exclude @default components/.exclude
     */
    components?: Parameters<typeof Components>[0];
    /**
     * @see https://github.com/JohnCampionJr/vite-plugin-vue-layouts
     */
    layouts?: Parameters<typeof Layouts>[0];
    /**
     * @see https://github.com/posva/unplugin-vue-router
     */
    router?: Parameters<typeof Router>[0];
    /**
     * @see https://unocss.dev/config/
     */
    unocss?: VitePluginConfig;
    /**
     * rollup-plugin-visualizer
     * @see https://github.com/btd/rollup-plugin-visualizer
     */
    visualizer?: PluginVisualizerOptions;
    groupIcons?: Partial<Options$2>;
    /**
     * unocss presets
     * @see https://unocss.dev/guide/presets
     */
    unocssPresets?: {
        uno?: Parameters<typeof presetUno>[0];
        attributify?: Parameters<typeof presetAttributify>[0];
        icons?: Parameters<typeof presetIcons>[0];
        typography?: Parameters<typeof presetTypography>[0];
    };
    fuse?: {
        /**
         * @en_US Extends the metadata fields returned by the search
         * @zh_CN 扩展搜索返回的元数据字段
         * @default []
         * @description:en-US By default, returns the following fields: title, tags, categories, author, excerpt, link
         * @description:zh-CN 默认返回以下字段：title、tags、categories、author、excerpt、link
         */
        extendKeys?: string[];
    };
    /**
     * @experimental
     * Enable Vue Devtools & Valaxy Devtools
     * @see https://devtools-next.vuejs.org/
     */
    devtools?: boolean;
    /**
     * @en config for markdown (include markdown-it plugins)
     * @zh markdown 相关配置
     * {@link MarkdownOptions}
     */
    markdown?: MarkdownOptions & Parameters<typeof Markdown>[0];
    /**
     * @en Extend markdown, you can modify the markdown content/excerpt
     * @zh 扩展 markdown
     */
    extendMd?: (ctx: {
        route: EditableTreeNode;
        data: Readonly<Record<string, any>>;
        content: string;
        excerpt?: string;
        path: string;
    }) => void;
    /**
     * @en Addons system
     * @zh 插件系统
     * @see 为什么需要插件？ [Why Addon? | Valaxy](https://valaxy.site/addons/why)
     * @see 插件橱窗 [Addons Gallery | Valaxy](https://valaxy.site/addons/gallery)
     * @example
     * ```ts
     * import { defineValaxyConfig } from 'valaxy'
     * import { addonTest } from 'valaxy-addon-test'
     *
     * export default defineValaxyConfig({
     *   addons: [
     *     // we always recommend to use function, so that you can pass options
     *     addonTest(),
     *   ]
     * })
     * ```
     */
    addons?: ValaxyAddons;
    /**
     * @en Hooks system, you can customize each stage of the lifecycle.
     * @zh 钩子系统，你可以对生命周期的各个阶段进行定制。
     * @see https://valaxy.site/guide/custom/hooks
     */
    hooks?: Partial<ValaxyHooks>;
    /**
     * beastiesOptions
     * @see https://github.com/danielroe/beasties
     */
    beastiesOptions?: Options$3;
}
type ValaxyAddonLike = ValaxyAddon | false | null | undefined;
type ValaxyAddons = (ValaxyAddon | string)[] | Record<string, ValaxyAddonLike>;
type ValaxyAddonFn<ThemeConfig = DefaultTheme.Config> = (addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyAddonExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyAddonFn<ThemeConfig>;
interface ValaxyAddonResolver {
    name: string;
    root: string;
    enable: boolean;
    global: boolean;
    props: Record<string, any>;
    options: Record<string, any>;
    configFile?: string;
    pkg: Record<string, any>;
    setup?: (node: ValaxyNode) => void;
}
type ValaxyApp = ReturnType<typeof createValaxyNode>;

interface ValaxyEntryOptions {
    /**
     * theme name
     */
    theme?: string;
    userRoot: string;
}
interface ResolvedValaxyOptions<ThemeConfig = DefaultTheme.Config> {
    mode: 'dev' | 'build';
    /**
     * package.json root
     */
    pkgRoot: string;
    /**
     * temp dir, store d.ts and other temp files
     * .valaxy
     */
    tempDir: string;
    /**
     * Client root path
     * @default 'valaxy/client'
     */
    clientRoot: string;
    /**
     * User root path
     * @default process.cwd()
     */
    userRoot: string;
    /**
     * Theme root path
     */
    themeRoot: string;
    /**
     * Addon root path
     */
    addonRoots: string[];
    /**
     * clientRoot, themeRoot, ...addonRoots, userRoot
     */
    roots: string[];
    theme: string;
    /**
     * Valaxy Config
     */
    config: ValaxyNodeConfig<ThemeConfig> & {
        /**
         * Generated Runtime Config
         */
        runtimeConfig: RuntimeConfig;
    };
    /**
     * config file path
     */
    configFile: string;
    siteConfigFile: string;
    themeConfigFile: string;
    pages: string[];
    /**
     * all addons
     * Record<package-name, OptionResolver>
     */
    addons: ValaxyAddonResolver[];
    /**
     * Collect redirect rule
     */
    redirects: RedirectItem[];
    env: MarkdownEnv & {
        links: string[];
    };
}
interface ValaxyServerOptions {
    onConfigReload?: (newConfig: ValaxyNodeConfig, config: ValaxyNodeConfig, force?: boolean) => void;
}
/**
 * Post process valaxyOptions
 * @param valaxyOptions
 * @param valaxyConfig
 */
declare function processValaxyOptions(valaxyOptions: ResolvedValaxyOptions, valaxyConfig: ValaxyNodeConfig): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
declare function resolveOptions(options?: ValaxyEntryOptions, mode?: ResolvedValaxyOptions['mode']): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
/**
 * resolve theme config
 * @param options
 */
declare function resolveThemeValaxyConfig(options: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

declare function build(valaxyApp: ValaxyNode, viteConfig?: InlineConfig): Promise<void>;
declare function ssgBuild(valaxyApp: ValaxyNode, viteConfig?: InlineConfig): Promise<void>;
/**
 * post process for ssg fix extra string like `/html>` `ml>` `l>`
 * handle tasks after ssg build
 * todo find why
 * @param options
 */
declare function postProcessForSSG(options: ResolvedValaxyOptions): Promise<void>;
declare function generateClientRedirects(options: ResolvedValaxyOptions): Promise<void>;

/**
 * merge vite.config.ts (user & theme)
 * @internal
 */
declare function mergeViteConfigs({ userRoot, themeRoot }: ResolvedValaxyOptions, command: 'serve' | 'build'): Promise<InlineConfig>;
/**
 * generate index.html from user/theme/client
 * @internal
 */
declare function getIndexHtml({ clientRoot, themeRoot, userRoot, config }: ResolvedValaxyOptions, rawHtml: string): Promise<string>;

declare function defineValaxyAddon<AddonOptions = object>(addonFunc: (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver['setup'];
}): (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver["setup"];
};
declare const defineAddon: typeof defineValaxyAddon;
declare function resolveAddonsConfig(addons: ValaxyAddonResolver[], options: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

interface LoadConfigFromFileOptions {
    cwd?: string;
    valaxyOptions?: ResolvedValaxyOptions;
}
type UserInputConfig = Record<string, any>;
interface ResolvedConfig<T extends UserInputConfig = UserInputConfig> {
    config: T;
    configFile: string;
}
declare function loadConfig<T extends UserInputConfig = UserInputConfig>(options: {
    name: string;
    cwd: string;
}): Promise<ResolvedConfig<T>>;
declare function loadConfigFromFile<T extends UserInputConfig>(file: string, options?: LoadConfigFromFileOptions): Promise<ResolvedConfig<T>>;

declare const defaultSiteConfig: SiteConfig;
/**
 * Type helper for site.config.ts
 * @param config
 */
declare function defineSiteConfig(config: UserSiteConfig): PartialDeep<SiteConfig>;
/**
 * resolve valaxy config from special root
 */
declare function resolveSiteConfigFromRoot(root: string): Promise<ResolvedConfig<PartialDeep<SiteConfig>>>;
/**
 * resolve site.config.ts and merge with default
 * @param root
 */
declare function resolveSiteConfig(root: string): Promise<{
    siteConfig: PartialDeep<SiteConfig>;
    siteConfigFile: string;
}>;

/**
 * resolve theme config from special root
 */
declare function resolveThemeConfigFromRoot(root: string): Promise<ResolvedConfig<DefaultTheme.Config>>;
/**
 * resolve theme.config.ts and merge with default
 */
declare function resolveUserThemeConfig(options: ResolvedValaxyOptions): Promise<{
    themeConfig: DefaultTheme.Config;
    themeConfigFile: string;
}>;
type ValaxyConfigExtendKey = 'vite' | 'vue' | 'unocss' | 'unocssPresets' | 'markdown' | 'extendMd' | 'addons';
type ValaxyPickConfig = Pick<ValaxyNodeConfig, ValaxyConfigExtendKey>;
type ValaxyTheme<ThemeConfig = DefaultTheme.Config> = ValaxyPickConfig & {
    themeConfig?: ThemeConfig;
};
declare function defineValaxyTheme<ThemeConfig = DefaultTheme.Config>(theme: ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>)): ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>);
declare const defineTheme: typeof defineValaxyTheme;

declare const defaultValaxyConfig: ValaxyNodeConfig;
/**
 * Type helper for valaxy.config.ts
 */
declare function defineValaxyConfig<ThemeConfig>(config: UserValaxyNodeConfig<ThemeConfig>): PartialDeep<ValaxyNodeConfig<ThemeConfig>>;
declare const defineConfig: typeof defineValaxyConfig;
declare function resolveValaxyConfigFromRoot(root: string, options?: ResolvedValaxyOptions): Promise<ResolvedConfig<ValaxyNodeConfig>>;
/**
 * merge valaxy.config
 * (source, default)
 */
declare const mergeValaxyConfig: <Source extends {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, Defaults extends Array<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} | (number | boolean | any[] | Record<never, any> | null | undefined)>>(source: Source, ...defaults: Defaults) => defu.Defu<Source, Defaults>;
/**
 * resolve user valaxy config
 * options only have userRoot
 * @param options
 */
declare function resolveValaxyConfig(options: ValaxyEntryOptions): Promise<{
    config: ValaxyNodeConfig;
    configFile: string;
    theme: string;
}>;

type UnoSetup = () => Awaitable<Partial<VitePluginConfig> | undefined>;
declare function defineUnoSetup(fn: UnoSetup): UnoSetup;

declare const EXCERPT_SEPARATOR = "<!-- more -->";
declare const EXTERNAL_URL_RE: RegExp;
declare const PATHNAME_PROTOCOL_RE: RegExp;
declare const ALL_ROUTE = "/:all(.*)*";
declare const customElements: Set<string>;
/**
 * @see https://vitejs.dev/config/shared-options.html#css-preprocessoroptions for sass@2
 */
declare const defaultViteConfig: UserConfig;

declare function ViteValaxyPlugins(valaxyApp: ValaxyNode, serverOptions?: ValaxyServerOptions): Promise<(PluginOption | PluginOption[])[]>;

/**
 * @packageDocumentation valaxy plugin
 */

/**
 * create valaxy loader (custom virtual modules)
 * multiple plugins
 * @internal
 * @param options
 * @param serverOptions
 */
declare function createValaxyPlugin(options: ResolvedValaxyOptions, serverOptions?: ValaxyServerOptions): Promise<Plugin[]>;

/**
 * with valaxyPrefix
 */
declare function getServerInfoText(msg: string): string;
declare function createServer(valaxyApp: ValaxyNode, viteConfig?: InlineConfig, serverOptions?: ValaxyServerOptions): Promise<vite.ViteDevServer>;

declare function getGitTimestamp(file: string, type?: 'created' | 'updated'): Promise<number>;

/**
 * is url external (http/https:)
 * @param str
 */
declare function isExternal(str: string): boolean;
declare function isPath(name: string): boolean;
/**
 * transform obj for vite code
 * @param obj
 */
declare function transformObject(obj: any): string;

declare const isInstalledGlobally: {
    value?: boolean;
};
/**
 * Resolve path for import url on Vite client side
 */
declare function resolveImportUrl(id: string): Promise<string>;
declare function toAtFS(path: string): string;
/**
 * Before is CJS: use 'resolve'
 * ESM: use 'mlly'
 */
declare function resolveImportPath(importName: string, ensure?: true): Promise<string>;
declare function resolveImportPath(importName: string, ensure?: boolean): Promise<string | undefined>;

export { ALL_ROUTE, EXCERPT_SEPARATOR, EXTERNAL_URL_RE, type HookResult, type LoadConfigFromFileOptions, PATHNAME_PROTOCOL_RE, type ResolvedConfig, type ResolvedValaxyOptions, type UnoSetup, type UserInputConfig, type UserValaxyNodeConfig, type ValaxyAddonExport, type ValaxyAddonFn, type ValaxyAddonLike, type ValaxyAddonResolver, type ValaxyAddons, type ValaxyApp, type ValaxyConfigExport, type ValaxyConfigExtendKey, type ValaxyConfigFn, type ValaxyEntryOptions, type ValaxyExtendConfig, type ValaxyHooks, type ValaxyNode, type ValaxyNodeConfig, type ValaxyPickConfig, type ValaxyServerOptions, type ValaxyTheme, ViteValaxyPlugins, build, createServer, createValaxyPlugin, customElements, defaultSiteConfig, defaultValaxyConfig, defaultViteConfig, defineAddon, defineConfig, defineSiteConfig, defineTheme, defineUnoSetup, defineValaxyAddon, defineValaxyConfig, defineValaxyTheme, generateClientRedirects, getGitTimestamp, getIndexHtml, getServerInfoText, isExternal, isInstalledGlobally, isPath, loadConfig, loadConfigFromFile, mergeValaxyConfig, mergeViteConfigs, postProcessForSSG, processValaxyOptions, resolveAddonsConfig, resolveImportPath, resolveImportUrl, resolveOptions, resolveSiteConfig, resolveSiteConfigFromRoot, resolveThemeConfigFromRoot, resolveThemeValaxyConfig, resolveUserThemeConfig, resolveValaxyConfig, resolveValaxyConfigFromRoot, ssgBuild, toAtFS, transformObject };
